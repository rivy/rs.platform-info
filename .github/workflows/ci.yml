# spell-checker:ignore (rust) clippy rustfmt rustup RUSTC RUSTFLAGS Zpanic Cpanic RUSTDOCFLAGS Ccodegen Coverflow
# spell-checker:ignore (bash) alnum esac (jargon) maint (utils) codecov grcov lcov (vars) tempfile () ntempfile

on: [push, pull_request]

name: Basic CI

jobs:
  check:
    name: cargo check
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, macOS-latest, windows-latest]
    steps:
      - uses: actions/checkout@v3
      - name: Install `rust` toolchain
        shell: bash
        env:
          TOOLCHAIN: stable
        run: |
          ## Install `rust` toolchain
          rm -f "${HOME}/.cargo/bin/"{rustfmt,cargo-fmt}
          rustup toolchain install ${TOOLCHAIN} -c rustfmt --profile minimal
          rustup default ${TOOLCHAIN}
      - run: cargo check
      - run: cargo check --examples

  test:
    name: cargo test
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, macOS-latest, windows-latest]
    steps:
      - uses: actions/checkout@v3
      - name: Install `rust` toolchain
        shell: bash
        env:
          TOOLCHAIN: stable
        run: |
          ## Install `rust` toolchain
          rm -f "${HOME}/.cargo/bin/"{rustfmt,cargo-fmt}
          rustup toolchain install ${TOOLCHAIN} -c rustfmt --profile minimal
          rustup default ${TOOLCHAIN}
      - run: cargo test
        env:
          RUST_BACKTRACE: '1'

  fmt:
    name: cargo fmt
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - name: Install `rust` toolchain
        shell: bash
        env:
          TOOLCHAIN: stable
        run: |
          ## Install `rust` toolchain
          rm -f "${HOME}/.cargo/bin/"{rustfmt,cargo-fmt}
          rustup toolchain install ${TOOLCHAIN} -c rustfmt --profile minimal
          rustup default ${TOOLCHAIN}
      - run: rustup component add rustfmt
      - run: cargo fmt --all -- --check

  clippy:
    name: cargo clippy
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, macOS-latest, windows-latest]
    steps:
      - uses: actions/checkout@v3
      - name: Install `rust` toolchain
        shell: bash
        env:
          TOOLCHAIN: stable
        run: |
          ## Install `rust` toolchain
          rm -f "${HOME}/.cargo/bin/"{rustfmt,cargo-fmt}
          rustup toolchain install ${TOOLCHAIN} -c rustfmt --profile minimal
          rustup default ${TOOLCHAIN}
      - run: rustup component add clippy
      - run: cargo clippy -- -D warnings
      - run: cargo clippy --examples -- -D warnings

  coverage:
    name: Code Coverage
    runs-on: ${{ matrix.job.os }}
    strategy:
      fail-fast: true
      matrix:
        job:
          - { os: ubuntu-latest, features: unix }
          - { os: macos-latest, features: macos }
          - { os: windows-latest, features: windows }
    steps:
      - uses: actions/checkout@v3
      - name: Initialize workflow variables
        id: vars
        shell: bash
        run: |
          ## VARs setup
          outputs() { step_id="${{ github.action }}"; for var in "$@" ; do echo steps.${step_id}.outputs.${var}="${!var}"; echo "${var}=${!var}" >> $GITHUB_OUTPUT; done; }
          # toolchain
          TOOLCHAIN="nightly" ## default to "nightly" toolchain (required for certain required unstable compiler flags) ## !maint: refactor when stable channel has needed support
          # * specify gnu-type TOOLCHAIN for windows; `grcov` requires gnu-style code coverage data files
          case ${{ matrix.job.os }} in windows-*) TOOLCHAIN="$TOOLCHAIN-x86_64-pc-windows-gnu" ;; esac;
          # * use requested TOOLCHAIN if specified
          if [ -n "${{ matrix.job.toolchain }}" ]; then TOOLCHAIN="${{ matrix.job.toolchain }}" ; fi
          outputs TOOLCHAIN
          # target-specific options
          # * CARGO_FEATURES_OPTION
          CARGO_FEATURES_OPTION='--all -- --check' ;  ## default to '--all-features' for code coverage
          # * CODECOV_FLAGS
          CODECOV_FLAGS=$( echo "${{ matrix.job.os }}" | sed 's/[^[:alnum:]]/_/g' )
          outputs CODECOV_FLAGS
      - name: Install `rust` toolchain
        shell: bash
        env:
          TOOLCHAIN: ${{ steps.vars.outputs.TOOLCHAIN }}
        run: |
          ## Install `rust` toolchain
          rm -f "${HOME}/.cargo/bin/"{rustfmt,cargo-fmt}
          rustup toolchain install ${TOOLCHAIN} -c rustfmt --profile minimal
          rustup default ${TOOLCHAIN}
      - run: cargo install grcov
      - name: Test
        shell: bash
        env:
          CARGO_INCREMENTAL: '0'
          RUSTC_WRAPPER: ''
          RUSTFLAGS: '-Zprofile -Ccodegen-units=1 -Copt-level=0 -Clink-dead-code -Coverflow-checks=off -Zpanic_abort_tests -Cpanic=abort'
          RUSTDOCFLAGS: '-Cpanic=abort'
        run: |
          ## Test
          cargo test ${{ steps.vars.outputs.CARGO_FEATURES_OPTION }} --no-fail-fast
      - name: Generate coverage data (via `grcov`)
        id: coverage
        shell: bash
        run: |
          ## Generate coverage data
          COVERAGE_REPORT_DIR="target/debug"
          COVERAGE_REPORT_FILE="${COVERAGE_REPORT_DIR}/lcov.info"
          mkdir -p "${COVERAGE_REPORT_DIR}"
          # display coverage files
          grcov . --output-type files --ignore build.rs --ignore "vendor/*" --ignore "/*" --ignore "[a-zA-Z]:/*" --excl-br-line "^\s*((debug_)?assert(_eq|_ne)?!|#\[derive\()" | sort --unique
          # generate coverage report
          grcov . --output-type lcov --output-path "${COVERAGE_REPORT_FILE}" --branch --ignore build.rs --ignore "vendor/*" --ignore "/*" --ignore "[a-zA-Z]:/*" --excl-br-line "^\s*((debug_)?assert(_eq|_ne)?!|#\[derive\()"
          echo "report=${COVERAGE_REPORT_FILE}" >> $GITHUB_OUTPUT
      - name: Upload coverage results (to Codecov.io)
        uses: codecov/codecov-action@v3
        # if: steps.vars.outputs.HAS_CODECOV_TOKEN
        with:
          # token: ${{ secrets.CODECOV_TOKEN }}
          file: ${{ steps.coverage.outputs.report }}
          ## flags: IntegrationTests, UnitTests, ${{ steps.vars.outputs.CODECOV_FLAGS }}
          flags: ${{ steps.vars.outputs.CODECOV_FLAGS }}
          name: codecov-umbrella
          fail_ci_if_error: false
